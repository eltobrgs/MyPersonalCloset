// eu fiz as telas de cadastro e login da seguinte forma 
// import React from "react";
// import { Text, View, Image, Alert } from "react-native";
// import { style } from "./styles";
// import Logo from "../../assets/logo.png";
// import { MaterialIcons, Octicons } from "@expo/vector-icons";
// import { temas } from "../../global/temas";
// import { Input } from "../../components/Input";
// import { Button } from "../../components/button";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { useNavigation, NavigationProp } from "@react-navigation/native";
// import { renderVaribale } from "../../global/variables";

// export default function Cadastro() {
//     const navigation = useNavigation<NavigationProp<any>>();
//     const [name, setName] = React.useState("");
//     const [email, setEmail] = React.useState("");
//     const [password, setPassword] = React.useState("");
//     const [showPassword, setShowPassword] = React.useState(true);
//     const [loading, setLoading] = React.useState(false);

//     // Função de cadastro
//     async function registerUser() {
//         try {
//             setLoading(true);

//             // Fazendo a requisição para o servidor
//             const response = await fetch(`${renderVaribale}/cadastro`, {
//                 method: "POST",
//                 headers: {
//                     "Content-Type": "application/json",
//                 },
//                 body: JSON.stringify({
//                     name: name.trim(),
//                     email: email.trim(),
//                     password: password.trim(),
//                 }),
//             });

//             const result = await response.json();

//             if (response.status === 201) {
//                 // Salvar o token do usuário no AsyncStorage
//                 await AsyncStorage.setItem("userToken", result.token);

//                 Alert.alert("Sucesso", "Cadastro realizado com sucesso!");
                
//                 // redirecionar para a tela de preferências
//                 navigation.navigate("UserPreferences");
//             } else {
//                 // Exibir mensagem de erro retornada pelo servidor
//                 Alert.alert("Erro no cadastro", result.error || "Erro desconhecido.");
//             }
//         } catch (error) {
//             Alert.alert(
//                 "Erro",
//                 `Erro ao se conectar com o servidor. Tente novamente mais tarde.\n\nDetalhes: ${(error as Error).message}`
//             );
//         } finally {
//             setLoading(false);
//         }
//     }

//     // Função para redirecionar para a tela de login
//     function redirectLogin() {
//         navigation.navigate("Login");
//     }

//     return (
//         <View style={style.container}>
//             <View style={style.boxTop}>
//                 <Image source={Logo} style={style.logo} resizeMode="contain" />
//                 <Text style={style.text}>Crie sua conta</Text>
//             </View>

//             <View style={style.boxMid}>
//                 <Input
//                     value={name}
//                     onChangeText={(text) => setName(text)}
//                     title="NOME COMPLETO"
//                     IconRigth={MaterialIcons}
//                     iconRightName="person"
//                 />
//                 <Input
//                     value={email}
//                     onChangeText={(text) => setEmail(text)}
//                     title="ENDEREÇO DE E-MAIL"
//                     IconRigth={MaterialIcons}
//                     iconRightName="email"
//                 />
//                 <Input
//                     value={password}
//                     onChangeText={(text) => setPassword(text)}
//                     title="SENHA"
//                     IconRigth={Octicons}
//                     iconRightName={showPassword ? "eye" : "eye-closed"}
//                     secureTextEntry={showPassword}
//                     onIconRigthPress={() => setShowPassword(!showPassword)}
//                 />
//             </View>

//             <View style={style.boxBotton}>
//                 <Button text="CADASTRAR-SE" loading={loading} onPress={registerUser} />
//             </View>

//             <Text style={style.textBotton}>
//                 Já tem uma conta?{" "}
//                 <Text onPress={redirectLogin} style={{ color: temas.cores.primaria }}>
//                     Entre agora!
//                 </Text>
//             </Text>
//         </View>
//     );
// }

// import React from "react";
// import { Text, View, Image, ActivityIndicator } from "react-native";
// import { style } from "./styles";
// import Logo from "../../assets/logo.png";
// import { MaterialIcons, Octicons } from "@expo/vector-icons";
// import { temas } from "../../global/temas";
// import { Input } from "../../components/Input";
// import { Button } from "../../components/button";
// import { useNavigation, NavigationProp } from "@react-navigation/native";
// import { renderVaribale } from "../../global/variables";
// import AsyncStorage from "@react-native-async-storage/async-storage";

// export default function Login() {
//     const navigation = useNavigation<NavigationProp<any>>();

//     // Estados para armazenar os valores dos campos e o status de carregamento
//     const [email, setEmail] = React.useState("");
//     const [password, setPassword] = React.useState("");
//     const [showPassword, setShowPassword] = React.useState(true);
//     const [loading, setLoading] = React.useState(false);

//     // Função de login
//     async function getLogin() {
//         if (!email || !password) {
//             alert("Preencha todos os campos");
//             return;
//         }

//         try {
//             setLoading(true);

//             const response = await fetch(`${renderVaribale}/login`, {
//                 method: "POST",
//                 headers: {
//                     "Content-Type": "application/json",
//                 },
//                 body: JSON.stringify({ email, password }),
//             });

//             const result = await response.json();

//             if (response.status === 200) {
//                 alert("Login bem-sucedido!");

//                 // Mudança: Armazenamos o token após o login com sucesso
//                 await AsyncStorage.setItem('userToken', result.token);

//                 // Agora, chamamos a função para obter os dados do usuário após o login
//                 await getUserData(result.token);

//                 navigation.reset({
//                     index: 0,
//                     routes: [{ name: "BottonRoutes" }],
//                 });
//             } else {
//                 alert(`Erro no login: ${result.error}`);
//             }
//         } catch (error) {
//             alert("Erro ao se conectar com o servidor.");
//         } finally {
//             setLoading(false);
//         }
//     }

//     // Função para buscar os dados do usuário (nome, por exemplo)
//     async function getUserData(token: any) {
//         try {
//             const response = await fetch(`${renderVaribale}/me`, {
//                 method: "GET",
//                 headers: {
//                     "Authorization": `Bearer ${token}`, // Envia o token para autenticar a requisição
//                 },
//             });

//             const user = await response.json();
//             if (response.status === 200) {
//                 // Armazenando o nome do usuário no AsyncStorage
//                 await AsyncStorage.setItem('userName', user.name); // Agora o nome é armazenado
//             } else {
//                 alert("Erro ao buscar dados do usuário.");
//             }
//         } catch (error) {
//             console.error("Erro ao recuperar os dados do usuário:", error);
//         }
//     }

//     // Função para redirecionar para a tela de cadastro
//     async function redirectRegister() {
//         navigation.navigate("Cadastro");
//     }

//     return (
//         <View style={style.container}>
//             <View style={style.boxTop}>
//                 <Image source={Logo} style={style.logo} resizeMode="contain" />
//                 <Text style={style.text}>Bem vindo de volta! Faça login para continuar</Text>

//             </View>

//             <View style={style.boxMid}>
//                 <Input
//                     value={email}
//                     onChangeText={setEmail}
//                     title="ENDEREÇO DE E-MAIL"
//                     IconRigth={MaterialIcons}
//                     iconRightName="email"
//                     keyboardType="email-address"
//                     autoCapitalize="none"
//                 />
//                 <Input
//                     value={password}
//                     onChangeText={setPassword}
//                     title="SENHA"
//                     IconRigth={Octicons}
//                     iconRightName={showPassword ? "eye" : "eye-closed"}
//                     secureTextEntry={showPassword}
//                     onIconRigthPress={() => setShowPassword(!showPassword)}
//                 />
//             </View>

//             <View style={style.boxBotton}>
//                 <Button text="ENTRAR" loading={loading} onPress={getLogin} />
//             </View>

//             <Text style={style.textBotton}>
//                 Ainda não tem uma conta?{" "}
//                 <Text onPress={redirectRegister} style={{ color: temas.cores.primaria }}>
//                     Crie uma agora mesmo!
//                 </Text>
//             </Text>
//         </View>
//     );
// }


// com essa api 


// // Endpoint para cadastrar um novo look
// router.post("/looks", async (req, res) => {
//     try {
//         const { title, description, photo } = req.body;
//         console.log("Dados do look recebidos:", req.body);

//         // Verificar token de autenticação
//         const authHeader = req.headers.authorization;
//         if (!authHeader) {
//             return res.status(401).json({ error: "Token não fornecido" });
//         }

//         const token = authHeader.split(" ")[1];
//         const decoded = jwt.verify(token, JWT_SECRET);

//         // Buscar usuário pelo ID
//         const user = await prisma.user.findUnique({
//             where: { id: decoded.userId },
//         });

//         if (!user) {
//             return res.status(404).json({ error: "Usuário não encontrado" });
//         }

//         // Criar um novo look
//         const newLook = await prisma.look.create({
//             data: {
//                 title,
//                 description,
//                 photo,
//                 userId: user.id, // Associar o look ao usuário
//             },
//         });

//         res.status(201).json({
//             message: "Look cadastrado com sucesso",
//             look: newLook,
//         });
//     } catch (err) {
//         console.error("Erro ao cadastrar look:", err);
//         res.status(500).json({ error: "Erro ao cadastrar look" });
//     }
// });

// // Endpoint para listar todos os looks do usuário
// router.get("/looks", async (req, res) => {
//     try {
//         // Verificar token de autenticação
//         const authHeader = req.headers.authorization;
//         if (!authHeader) {
//             return res.status(401).json({ error: "Token não fornecido" });
//         }

//         const token = authHeader.split(" ")[1];
//         const decoded = jwt.verify(token, JWT_SECRET);

//         // Buscar usuário pelo ID
//         const user = await prisma.user.findUnique({
//             where: { id: decoded.userId },
//         });

//         if (!user) {
//             return res.status(404).json({ error: "Usuário não encontrado" });
//         }

//         // Buscar todos os looks do usuário
//         const looks = await prisma.look.findMany({
//             where: { userId: user.id },
//         });

//         res.status(200).json(looks);
//     } catch (err) {
//         console.error("Erro ao listar looks:", err);
//         res.status(500).json({ error: "Erro ao listar looks" });
//     }
// });

// export default router;

// nessa api tem as rotas looks, tanto post quando get, ai queria que você transformasse esse modal e essa tela em versoes que cadastrassem looks e mostrassem esses looks se inspirando nas tela de login e cadastro 

// modal 
// import React, { createContext, useContext, useRef, useState } from "react";
// import {
//   Alert,
//   Text,
//   View,
//   TouchableOpacity,
//   StyleSheet,
//   ScrollView,
//   Image,
// } from "react-native";
// import { Modalize } from "react-native-modalize";
// import { AntDesign } from "@expo/vector-icons";
// import * as ImagePicker from "expo-image-picker"; // Biblioteca para seleção de imagens
// import { Input } from "../components/Input";
// import { temas } from "../global/temas";

// export const authContextList = createContext<any>({});

// export const AuthProvider_list = (props: any): any => {
//   const modalizeRef = useRef<Modalize>(null);
//   const [looks, setLooks] = useState<any[]>([]);
//   const [newLook, setNewLook] = useState({
//     title: "",
//     description: "",
//     photo: null as string | null, // Campo para armazenar a foto
//   });

//   const onOpen = () => {
//     modalizeRef.current?.open();
//   };

//   const addLook = () => {
//     if (!newLook.title || !newLook.description) {
//       Alert.alert("Erro", "Preencha todos os campos antes de adicionar um look.");
//       return;
//     }
//     setLooks([...looks, newLook]);
//     setNewLook({ title: "", description: "", photo: null });
//     modalizeRef.current?.close();
//   };

//   const selectImage = async () => {
//     const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
//     if (!permissionResult.granted) {
//       Alert.alert("Erro", "Permissão para acessar a galeria é necessária!");
//       return;
//     }
//     const pickerResult = await ImagePicker.launchImageLibraryAsync({
//       mediaTypes: ImagePicker.MediaTypeOptions.Images,
//     });
//     if (!pickerResult.canceled) {
//       setNewLook({ ...newLook, photo: pickerResult.assets[0].uri });
//     }
//   };

//   const _lookList = () => (
//     <View style={styles.container}>
//       <View style={styles.header}>
//         <Text style={styles.title}>Looks do Dia</Text>
//         <TouchableOpacity onPress={() => modalizeRef.current?.close()}>
//           <AntDesign name="closecircle" style={styles.closeIcon} />
//         </TouchableOpacity>
//       </View>

//       <View style={styles.inputContainer}>
//         <Input
//           title="Título"
//           value={newLook.title}
//           onChangeText={(text) => setNewLook({ ...newLook, title: text })}
//           IconLeft={AntDesign}
//           iconLeftName="edit"
//         />
//         <Input
//           title="Descrição"
//           value={newLook.description}
//           onChangeText={(text) => setNewLook({ ...newLook, description: text })}
//           IconLeft={AntDesign}
//           iconLeftName="filetext1"
//         />
//         {newLook.photo && (
//           <Image source={{ uri: newLook.photo }} style={styles.imagePreview} />
//         )}
//         <TouchableOpacity onPress={selectImage} style={styles.imageButton}>
//           <Text style={styles.imageButtonText}>
//             {newLook.photo ? "Trocar Foto" : "Adicionar Foto"}
//           </Text>
//         </TouchableOpacity>
//         <TouchableOpacity onPress={addLook} style={styles.addButton}>
//           <Text style={styles.addButtonText}>Adicionar Look</Text>
//         </TouchableOpacity>
//       </View>

//       {/* <ScrollView style={styles.content}>
//         {looks.map((look, index) => (
//           <View key={index} style={styles.card}>
//             {look.photo && <Image source={{ uri: look.photo }} style={styles.cardImage} />}
//             <Text style={styles.cardTitle}>{look.title}</Text>
//             <Text style={styles.cardDescription}>{look.description}</Text>
//           </View>
//         ))}
//       </ScrollView> */}
//     </View>
//   );

//   return (
//     <authContextList.Provider value={{ onOpen, looks }}>
//       {props.children}
//       <Modalize ref={modalizeRef} adjustToContentHeight={true}>
//         {_lookList()}
//       </Modalize>
//     </authContextList.Provider>
//   );
// };

// export const useAuth = () => useContext(authContextList);

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     backgroundColor: temas.cores.bgScreen,
//     padding: 20,
//   },
//   header: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 20,
//   },
//   title: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: temas.cores.primaria,
//   },
//   closeIcon: {
//     fontSize: 28,
//     color: temas.cores.secundaria,
//   },
//   inputContainer: {
//     marginBottom: 20,
//   },
//   addButton: {
//     backgroundColor: temas.cores.primaria,
//     padding: 10,
//     borderRadius: 5,
//     alignItems: "center",
//     marginTop: 10,
//   },
//   addButtonText: {
//     color: temas.cores.bgCard,
//     fontWeight: "bold",
//   },
//   content: {
//     flex: 1,
//   },
//   card: {
//     backgroundColor: temas.cores.bgCard,
//     padding: 20,
//     marginBottom: 15,
//     borderRadius: 8,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//     color: temas.cores.secundaria,
//   },
//   cardDescription: {
//     fontSize: 14,
//     color: temas.cores.gray,
//   },
//   cardImage: {
//     width: "100%",
//     height: 200,
//     marginBottom: 10,
//     borderRadius: 8,
//   },
//   imagePreview: {
//     width: "100%",
//     height: 200,
//     marginBottom: 10,
//     borderRadius: 8,
//   },
//   imageButton: {
//     backgroundColor: "#A9A9A9",
//     padding: 10,
//     borderRadius: 5,
//     alignItems: "center",
//   },
//   imageButtonText: {
//     color: "#FFF",
//     fontWeight: "bold",
//   },
// });


// tela 
// import React from "react";
// import { View, ScrollView, TouchableOpacity, Text } from "react-native";
// import ClosetItem from "../../components/ClosetItem";
// import CustomHeader from "../../components/Header";
// import { style } from "./styles";
// import { useAuth } from "../../context/authContext_list";
// import logo from "../../assets/logo.png";

// export default function Closet() {
//   const { onOpen, looks } = useAuth();

//   return (
//     <View style={style.geral}>
//       <CustomHeader
//         title="Meu Closet"
//         number={looks.length.toString()}
//         imageSource={logo}
//       />

//       <ScrollView style={style.scrollContainer}>
//         {looks.map((look: { photo: string | null; title: string; description: string; }, index: React.Key | null | undefined) => (
//           <ClosetItem
//             key={index}
//             image={look.photo && typeof look.photo === 'string' ? { uri: look.photo } : require("../../assets/default-image.jpg")}
//             title={look.title}
//             description={look.description}
//             onPress={() => {}}
//           />
//         ))}
//       </ScrollView>

//       <TouchableOpacity onPress={onOpen} style={style.floatingButton}>
//         <Text style={style.floatingButtonText}>+</Text>
//       </TouchableOpacity>
//     </View>
//   );
// }

// model Look {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   photo       String?
//   userId      String   @db.ObjectId
//   user        User     @relation(fields: [userId], references: [id]) // Relacionamento com User
// }